{"ast":null,"code":"import _objectSpread from \"/Users/miralem/Documents/GitHub/graphiql-explorer-example/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/miralem/Documents/GitHub/graphiql-explorer-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/miralem/Documents/GitHub/graphiql-explorer-example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/miralem/Documents/GitHub/graphiql-explorer-example/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/miralem/Documents/GitHub/graphiql-explorer-example/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/miralem/Documents/GitHub/graphiql-explorer-example/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/miralem/Documents/GitHub/graphiql-explorer-example/src/App.js\";\nimport React, { Component } from \"react\";\nimport GraphiQL from \"graphiql\";\nimport GraphiQLExplorer from \"graphiql-explorer\";\nimport { buildClientSchema, getIntrospectionQuery, parse } from \"graphql\";\nimport { makeDefaultArg, getDefaultScalarArgValue } from \"./CustomArgs\";\nimport \"graphiql/graphiql.css\";\nimport \"./App.css\";\n\nfunction fetcher(params) {\n  return fetch(process.env.REACT_APP_GRAPHQL_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(params)\n  }).then(function (response) {\n    return response.text();\n  }).then(function (responseBody) {\n    try {\n      return JSON.parse(responseBody);\n    } catch (e) {\n      return responseBody;\n    }\n  });\n}\n\nvar DEFAULT_QUERY = \"# shift-option/alt-click on a query below to jump to it in the explorer\\n# option/alt-click on a field in the explorer to select all subfields\\nquery npmPackage {\\n  npm {\\n    package(name: \\\"onegraph-apollo-client\\\") {\\n      name\\n      homepage\\n      downloads {\\n        lastMonth {\\n          count\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nquery graphQLPackage {\\n  npm {\\n    package(name: \\\"graphql\\\") {\\n      name\\n      homepage\\n      downloads {\\n        lastMonth {\\n          count\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nfragment bundlephobiaInfo on BundlephobiaDependencyInfo {\\n  name\\n  size\\n  version\\n  history {\\n    dependencyCount\\n    size\\n    gzip\\n  }\\n}\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      schema: null,\n      query: DEFAULT_QUERY,\n      explorerIsOpen: true\n    };\n\n    _this._handleInspectOperation = function (cm, mousePos) {\n      var parsedQuery = parse(_this.state.query || \"\");\n\n      if (!parsedQuery) {\n        console.error(\"Couldn't parse query document\");\n        return null;\n      }\n\n      var token = cm.getTokenAt(mousePos);\n      var start = {\n        line: mousePos.line,\n        ch: token.start\n      };\n      var end = {\n        line: mousePos.line,\n        ch: token.end\n      };\n      var relevantMousePos = {\n        start: cm.indexFromPos(start),\n        end: cm.indexFromPos(end)\n      };\n      var position = relevantMousePos;\n      var def = parsedQuery.definitions.find(function (definition) {\n        if (!definition.loc) {\n          console.log(\"Missing location information for definition\");\n          return false;\n        }\n\n        var _definition$loc = definition.loc,\n            start = _definition$loc.start,\n            end = _definition$loc.end;\n        return start <= position.start && end >= position.end;\n      });\n\n      if (!def) {\n        console.error(\"Unable to find definition corresponding to mouse position\");\n        return null;\n      }\n\n      var operationKind = def.kind === \"OperationDefinition\" ? def.operation : def.kind === \"FragmentDefinition\" ? \"fragment\" : \"unknown\";\n      var operationName = def.kind === \"OperationDefinition\" && !!def.name ? def.name.value : def.kind === \"FragmentDefinition\" && !!def.name ? def.name.value : \"unknown\";\n      var selector = \".graphiql-explorer-root #\".concat(operationKind, \"-\").concat(operationName);\n      var el = document.querySelector(selector);\n      el && el.scrollIntoView();\n    };\n\n    _this._handleEditQuery = function (query) {\n      return _this.setState({\n        query: query\n      });\n    };\n\n    _this._handleToggleExplorer = function () {\n      _this.setState({\n        explorerIsOpen: !_this.state.explorerIsOpen\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetcher({\n        query: getIntrospectionQuery()\n      }).then(function (result) {\n        var editor = _this2._graphiql.getQueryEditor();\n\n        editor.setOption(\"extraKeys\", _objectSpread({}, editor.options.extraKeys || {}, {\n          \"Shift-Alt-LeftClick\": _this2._handleInspectOperation\n        }));\n\n        _this2.setState({\n          schema: buildClientSchema(result.data)\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          query = _this$state.query,\n          schema = _this$state.schema;\n      return React.createElement(\"div\", {\n        className: \"graphiql-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(GraphiQLExplorer, {\n        schema: schema,\n        query: query,\n        onEdit: this._handleEditQuery,\n        onRunOperation: function onRunOperation(operationName) {\n          return _this3._graphiql.handleRunQuery(operationName);\n        },\n        explorerIsOpen: this.state.explorerIsOpen,\n        onToggleExplorer: this._handleToggleExplorer,\n        getDefaultScalarArgValue: getDefaultScalarArgValue,\n        makeDefaultArg: makeDefaultArg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(GraphiQL, {\n        ref: function ref(_ref) {\n          return _this3._graphiql = _ref;\n        },\n        fetcher: fetcher,\n        schema: schema,\n        query: query,\n        onEditQuery: this._handleEditQuery,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(GraphiQL.Toolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(GraphiQL.Button, {\n        onClick: function onClick() {\n          return _this3._graphiql.handlePrettifyQuery();\n        },\n        label: \"Prettify\",\n        title: \"Prettify Query (Shift-Ctrl-P)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(GraphiQL.Button, {\n        onClick: function onClick() {\n          return _this3._graphiql.handleToggleHistory();\n        },\n        label: \"History\",\n        title: \"Show History\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), React.createElement(GraphiQL.Button, {\n        onClick: this._handleToggleExplorer,\n        label: \"Explorer\",\n        title: \"Toggle Explorer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/miralem/Documents/GitHub/graphiql-explorer-example/src/App.js"],"names":["React","Component","GraphiQL","GraphiQLExplorer","buildClientSchema","getIntrospectionQuery","parse","makeDefaultArg","getDefaultScalarArgValue","fetcher","params","fetch","process","env","REACT_APP_GRAPHQL_ENDPOINT","method","headers","Accept","body","JSON","stringify","then","response","text","responseBody","e","DEFAULT_QUERY","App","state","schema","query","explorerIsOpen","_handleInspectOperation","cm","mousePos","parsedQuery","console","error","token","getTokenAt","start","line","ch","end","relevantMousePos","indexFromPos","position","def","definitions","find","definition","loc","log","operationKind","kind","operation","operationName","name","value","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","setState","_handleToggleExplorer","result","editor","_graphiql","getQueryEditor","setOption","options","extraKeys","data","handleRunQuery","ref","handlePrettifyQuery","handleToggleHistory"],"mappings":"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","sourcesContent":["// @flow\n\nimport React, { Component } from \"react\"\nimport GraphiQL from \"graphiql\"\nimport GraphiQLExplorer from \"graphiql-explorer\"\nimport { buildClientSchema, getIntrospectionQuery, parse } from \"graphql\"\n\nimport { makeDefaultArg, getDefaultScalarArgValue } from \"./CustomArgs\"\n\nimport \"graphiql/graphiql.css\"\nimport \"./App.css\"\n\nimport type { GraphQLSchema } from \"graphql\"\n\nfunction fetcher(params: Object): Object {\n  return fetch(process.env.REACT_APP_GRAPHQL_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(params),\n  })\n    .then(function(response) {\n      return response.text()\n    })\n    .then(function(responseBody) {\n      try {\n        return JSON.parse(responseBody)\n      } catch (e) {\n        return responseBody\n      }\n    })\n}\n\nconst DEFAULT_QUERY = `# shift-option/alt-click on a query below to jump to it in the explorer\n# option/alt-click on a field in the explorer to select all subfields\nquery npmPackage {\n  npm {\n    package(name: \"onegraph-apollo-client\") {\n      name\n      homepage\n      downloads {\n        lastMonth {\n          count\n        }\n      }\n    }\n  }\n}\n\nquery graphQLPackage {\n  npm {\n    package(name: \"graphql\") {\n      name\n      homepage\n      downloads {\n        lastMonth {\n          count\n        }\n      }\n    }\n  }\n}\n\nfragment bundlephobiaInfo on BundlephobiaDependencyInfo {\n  name\n  size\n  version\n  history {\n    dependencyCount\n    size\n    gzip\n  }\n}`\n\ntype State = {\n  schema: ?GraphQLSchema,\n  query: string,\n  explorerIsOpen: boolean,\n}\n\nclass App extends Component<{}, State> {\n  _graphiql: GraphiQL\n  state = { schema: null, query: DEFAULT_QUERY, explorerIsOpen: true }\n\n  componentDidMount() {\n    fetcher({\n      query: getIntrospectionQuery(),\n    }).then((result) => {\n      const editor = this._graphiql.getQueryEditor()\n      editor.setOption(\"extraKeys\", {\n        ...(editor.options.extraKeys || {}),\n        \"Shift-Alt-LeftClick\": this._handleInspectOperation,\n      })\n\n      this.setState({ schema: buildClientSchema(result.data) })\n    })\n  }\n\n  _handleInspectOperation = (cm: any, mousePos: { line: Number, ch: Number }) => {\n    const parsedQuery = parse(this.state.query || \"\")\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\")\n      return null\n    }\n\n    var token = cm.getTokenAt(mousePos)\n    var start = { line: mousePos.line, ch: token.start }\n    var end = { line: mousePos.line, ch: token.end }\n    var relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end),\n    }\n\n    var position = relevantMousePos\n\n    var def = parsedQuery.definitions.find((definition) => {\n      if (!definition.loc) {\n        console.log(\"Missing location information for definition\")\n        return false\n      }\n\n      const { start, end } = definition.loc\n      return start <= position.start && end >= position.end\n    })\n\n    if (!def) {\n      console.error(\"Unable to find definition corresponding to mouse position\")\n      return null\n    }\n\n    var operationKind =\n      def.kind === \"OperationDefinition\"\n        ? def.operation\n        : def.kind === \"FragmentDefinition\"\n        ? \"fragment\"\n        : \"unknown\"\n\n    var operationName =\n      def.kind === \"OperationDefinition\" && !!def.name\n        ? def.name.value\n        : def.kind === \"FragmentDefinition\" && !!def.name\n        ? def.name.value\n        : \"unknown\"\n\n    var selector = `.graphiql-explorer-root #${operationKind}-${operationName}`\n\n    var el = document.querySelector(selector)\n    el && el.scrollIntoView()\n  }\n\n  _handleEditQuery = (query: string): void => this.setState({ query })\n\n  _handleToggleExplorer = () => {\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen })\n  }\n\n  render() {\n    const { query, schema } = this.state\n    return (\n      <div className=\"graphiql-container\">\n        <GraphiQLExplorer\n          schema={schema}\n          query={query}\n          onEdit={this._handleEditQuery}\n          onRunOperation={(operationName) => this._graphiql.handleRunQuery(operationName)}\n          explorerIsOpen={this.state.explorerIsOpen}\n          onToggleExplorer={this._handleToggleExplorer}\n          getDefaultScalarArgValue={getDefaultScalarArgValue}\n          makeDefaultArg={makeDefaultArg}\n        />\n        <GraphiQL\n          ref={(ref) => (this._graphiql = ref)}\n          fetcher={fetcher}\n          schema={schema}\n          query={query}\n          onEditQuery={this._handleEditQuery}\n        >\n          <GraphiQL.Toolbar>\n            <GraphiQL.Button\n              onClick={() => this._graphiql.handlePrettifyQuery()}\n              label=\"Prettify\"\n              title=\"Prettify Query (Shift-Ctrl-P)\"\n            />\n            <GraphiQL.Button\n              onClick={() => this._graphiql.handleToggleHistory()}\n              label=\"History\"\n              title=\"Show History\"\n            />\n            <GraphiQL.Button\n              onClick={this._handleToggleExplorer}\n              label=\"Explorer\"\n              title=\"Toggle Explorer\"\n            />\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}