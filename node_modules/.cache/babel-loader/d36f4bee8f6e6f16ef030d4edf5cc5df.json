{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.defaultValue = defaultValue;\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _graphql = require('graphql');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // TODO: 1. Add default fields recursively\n// TODO: 2. Add default fields for all selections (not just fragments)\n// TODO: 3. Add stylesheet and remove inline styles\n// TODO: 4. Indication of when query in explorer diverges from query in editor pane\n// TODO: 5. Separate section for deprecated args, with support for 'beta' fields\n// TODO: 6. Custom default arg fields\n// Note: Attempted 1. and 2., but they were more annoying than helpful\n\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n} // Names match class names in graphiql app.css\n// https://github.com/graphql/graphiql/blob/master/packages/graphiql/css/app.css\n\n\nvar defaultColors = {\n  keyword: '#B11A04',\n  // OperationName, FragmentName\n  def: '#D2054E',\n  // FieldName\n  property: '#1F61A0',\n  // FieldAlias\n  qualifier: '#1C92A9',\n  // ArgumentName and ObjectFieldName\n  attribute: '#8B2BB9',\n  number: '#2882F9',\n  string: '#D64292',\n  // Boolean\n  builtin: '#D47509',\n  // Enum\n  string2: '#0B7FC7',\n  variable: '#397D13',\n  // Type\n  atom: '#CA9800'\n};\nvar defaultArrowOpen = React.createElement('svg', {\n  width: '12',\n  height: '9'\n}, React.createElement('path', {\n  fill: '#666',\n  d: 'M 0 2 L 9 2 L 4.5 7.5 z'\n}));\nvar defaultArrowClosed = React.createElement('svg', {\n  width: '12',\n  height: '9'\n}, React.createElement('path', {\n  fill: '#666',\n  d: 'M 0 0 L 0 9 L 5.5 4.5 z'\n}));\nvar defaultCheckboxChecked = React.createElement('svg', {\n  style: {\n    marginRight: '3px',\n    marginLeft: '-3px'\n  },\n  width: '12',\n  height: '12',\n  viewBox: '0 0 18 18',\n  fill: 'none',\n  xmlns: 'http://www.w3.org/2000/svg'\n}, React.createElement('path', {\n  d: 'M16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0ZM16 16H2V2H16V16ZM14.99 6L13.58 4.58L6.99 11.17L4.41 8.6L2.99 10.01L6.99 14L14.99 6Z',\n  fill: '#666'\n}));\nvar defaultCheckboxUnchecked = React.createElement('svg', {\n  style: {\n    marginRight: '3px',\n    marginLeft: '-3px'\n  },\n  width: '12',\n  height: '12',\n  viewBox: '0 0 18 18',\n  fill: 'none',\n  xmlns: 'http://www.w3.org/2000/svg'\n}, React.createElement('path', {\n  d: 'M16 2V16H2V2H16ZM16 0H2C0.9 0 0 0.9 0 2V16C0 17.1 0.9 18 2 18H16C17.1 18 18 17.1 18 16V2C18 0.9 17.1 0 16 0Z',\n  fill: '#CCC'\n}));\n\nfunction Checkbox(props) {\n  return props.checked ? props.styleConfig.checkboxChecked : props.styleConfig.checkboxUnchecked;\n}\n\nfunction defaultGetDefaultFieldNames(type) {\n  var fields = type.getFields(); // Is there an `id` field?\n\n  if (fields['id']) {\n    var res = ['id'];\n\n    if (fields['email']) {\n      res.push('email');\n    } else if (fields['name']) {\n      res.push('name');\n    }\n\n    return res;\n  } // Is there an `edges` field?\n\n\n  if (fields['edges']) {\n    return ['edges'];\n  } // Is there an `node` field?\n\n\n  if (fields['node']) {\n    return ['node'];\n  }\n\n  if (fields['nodes']) {\n    return ['nodes'];\n  } // Include all leaf-type fields.\n\n\n  var leafFieldNames = [];\n  Object.keys(fields).forEach(function (fieldName) {\n    if ((0, _graphql.isLeafType)(fields[fieldName].type)) {\n      leafFieldNames.push(fieldName);\n    }\n  });\n\n  if (!leafFieldNames.length) {\n    // No leaf fields, add typename so that the query stays valid\n    return ['__typename'];\n  }\n\n  return leafFieldNames.slice(0, 2); // Prevent too many fields from being added\n}\n\nfunction isRequiredArgument(arg) {\n  return (0, _graphql.isNonNullType)(arg.type) && arg.defaultValue === undefined;\n}\n\nfunction unwrapOutputType(outputType) {\n  var unwrappedType = outputType;\n\n  while ((0, _graphql.isWrappingType)(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType;\n  }\n\n  return unwrappedType;\n}\n\nfunction unwrapInputType(inputType) {\n  var unwrappedType = inputType;\n\n  while ((0, _graphql.isWrappingType)(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType;\n  }\n\n  return unwrappedType;\n}\n\nfunction coerceArgValue(argType, value) {\n  // Handle the case where we're setting a variable as the value\n  if (typeof value !== 'string' && value.kind === 'VariableDefinition') {\n    return value.variable;\n  } else if ((0, _graphql.isScalarType)(argType)) {\n    try {\n      switch (argType.name) {\n        case 'String':\n          return {\n            kind: 'StringValue',\n            value: String(argType.parseValue(value))\n          };\n\n        case 'Float':\n          return {\n            kind: 'FloatValue',\n            value: String(argType.parseValue(parseFloat(value)))\n          };\n\n        case 'Int':\n          return {\n            kind: 'IntValue',\n            value: String(argType.parseValue(parseInt(value, 10)))\n          };\n\n        case 'Boolean':\n          try {\n            var parsed = JSON.parse(value);\n\n            if (typeof parsed === 'boolean') {\n              return {\n                kind: 'BooleanValue',\n                value: parsed\n              };\n            } else {\n              return {\n                kind: 'BooleanValue',\n                value: false\n              };\n            }\n          } catch (e) {\n            return {\n              kind: 'BooleanValue',\n              value: false\n            };\n          }\n\n        default:\n          return {\n            kind: 'StringValue',\n            value: String(argType.parseValue(value))\n          };\n      }\n    } catch (e) {\n      console.error('error coercing arg value', e, value);\n      return {\n        kind: 'StringValue',\n        value: value\n      };\n    }\n  } else {\n    try {\n      var parsedValue = argType.parseValue(value);\n\n      if (parsedValue) {\n        return {\n          kind: 'EnumValue',\n          value: String(parsedValue)\n        };\n      } else {\n        return {\n          kind: 'EnumValue',\n          value: argType.getValues()[0].name\n        };\n      }\n    } catch (e) {\n      return {\n        kind: 'EnumValue',\n        value: argType.getValues()[0].name\n      };\n    }\n  }\n}\n\nvar InputArgView = function (_React$PureComponent) {\n  _inherits(InputArgView, _React$PureComponent);\n\n  function InputArgView() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, InputArgView);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputArgView.__proto__ || Object.getPrototypeOf(InputArgView)).call.apply(_ref, [this].concat(args))), _this), _this._getArgSelection = function () {\n      return _this.props.selection.fields.find(function (field) {\n        return field.name.value === _this.props.arg.name;\n      });\n    }, _this._removeArg = function () {\n      var selection = _this.props.selection;\n\n      var argSelection = _this._getArgSelection();\n\n      _this._previousArgSelection = argSelection;\n\n      _this.props.modifyFields(selection.fields.filter(function (field) {\n        return field !== argSelection;\n      }), true);\n    }, _this._addArg = function () {\n      var _this$props = _this.props,\n          selection = _this$props.selection,\n          arg = _this$props.arg,\n          getDefaultScalarArgValue = _this$props.getDefaultScalarArgValue,\n          parentField = _this$props.parentField,\n          makeDefaultArg = _this$props.makeDefaultArg;\n      var argType = unwrapInputType(arg.type);\n      var argSelection = null;\n\n      if (_this._previousArgSelection) {\n        argSelection = _this._previousArgSelection;\n      } else if ((0, _graphql.isInputObjectType)(argType)) {\n        var _fields = argType.getFields();\n\n        argSelection = {\n          kind: 'ObjectField',\n          name: {\n            kind: 'Name',\n            value: arg.name\n          },\n          value: {\n            kind: 'ObjectValue',\n            fields: defaultInputObjectFields(getDefaultScalarArgValue, makeDefaultArg, parentField, Object.keys(_fields).map(function (k) {\n              return _fields[k];\n            }))\n          }\n        };\n      } else if ((0, _graphql.isLeafType)(argType)) {\n        argSelection = {\n          kind: 'ObjectField',\n          name: {\n            kind: 'Name',\n            value: arg.name\n          },\n          value: getDefaultScalarArgValue(parentField, arg, argType)\n        };\n      }\n\n      if (!argSelection) {\n        console.error('Unable to add arg for argType', argType);\n      } else {\n        return _this.props.modifyFields([].concat(_toConsumableArray(selection.fields || []), [argSelection]), true);\n      }\n    }, _this._setArgValue = function (event, options) {\n      var settingToNull = false;\n      var settingToVariable = false;\n      var settingToLiteralValue = false;\n\n      try {\n        if (event.kind === 'VariableDefinition') {\n          settingToVariable = true;\n        } else if (event === null || typeof event === 'undefined') {\n          settingToNull = true;\n        } else if (typeof event.kind === 'string') {\n          settingToLiteralValue = true;\n        }\n      } catch (e) {}\n\n      var selection = _this.props.selection;\n\n      var argSelection = _this._getArgSelection();\n\n      if (!argSelection) {\n        console.error('missing arg selection when setting arg value');\n        return;\n      }\n\n      var argType = unwrapInputType(_this.props.arg.type);\n      var handleable = (0, _graphql.isLeafType)(argType) || settingToVariable || settingToNull || settingToLiteralValue;\n\n      if (!handleable) {\n        console.warn('Unable to handle non leaf types in InputArgView.setArgValue', event);\n        return;\n      }\n\n      var targetValue = void 0;\n      var value = void 0;\n\n      if (event === null || typeof event === 'undefined') {\n        value = null;\n      } else if (!event.target && !!event.kind && event.kind === 'VariableDefinition') {\n        targetValue = event;\n        value = targetValue.variable;\n      } else if (typeof event.kind === 'string') {\n        value = event;\n      } else if (event.target && typeof event.target.value === 'string') {\n        targetValue = event.target.value;\n        value = coerceArgValue(argType, targetValue);\n      }\n\n      var newDoc = _this.props.modifyFields((selection.fields || []).map(function (field) {\n        var isTarget = field === argSelection;\n        var newField = isTarget ? _extends({}, field, {\n          value: value\n        }) : field;\n        return newField;\n      }), options);\n\n      return newDoc;\n    }, _this._modifyChildFields = function (fields) {\n      return _this.props.modifyFields(_this.props.selection.fields.map(function (field) {\n        return field.name.value === _this.props.arg.name ? _extends({}, field, {\n          value: {\n            kind: 'ObjectValue',\n            fields: fields\n          }\n        }) : field;\n      }), true);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(InputArgView, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          arg = _props.arg,\n          parentField = _props.parentField;\n\n      var argSelection = this._getArgSelection();\n\n      return React.createElement(AbstractArgView, {\n        argValue: argSelection ? argSelection.value : null,\n        arg: arg,\n        parentField: parentField,\n        addArg: this._addArg,\n        removeArg: this._removeArg,\n        setArgFields: this._modifyChildFields,\n        setArgValue: this._setArgValue,\n        getDefaultScalarArgValue: this.props.getDefaultScalarArgValue,\n        makeDefaultArg: this.props.makeDefaultArg,\n        onRunOperation: this.props.onRunOperation,\n        styleConfig: this.props.styleConfig,\n        onCommit: this.props.onCommit,\n        definition: this.props.definition\n      });\n    }\n  }]);\n\n  return InputArgView;\n}(React.PureComponent);\n\nfunction defaultValue(argType) {\n  if ((0, _graphql.isEnumType)(argType)) {\n    return {\n      kind: 'EnumValue',\n      value: argType.getValues()[0].name\n    };\n  } else {\n    switch (argType.name) {\n      case 'String':\n        return {\n          kind: 'StringValue',\n          value: ''\n        };\n\n      case 'Float':\n        return {\n          kind: 'FloatValue',\n          value: '1.5'\n        };\n\n      case 'Int':\n        return {\n          kind: 'IntValue',\n          value: '10'\n        };\n\n      case 'Boolean':\n        return {\n          kind: 'BooleanValue',\n          value: false\n        };\n\n      default:\n        return {\n          kind: 'StringValue',\n          value: ''\n        };\n    }\n  }\n}\n\nfunction defaultGetDefaultScalarArgValue(parentField, arg, argType) {\n  return defaultValue(argType);\n}\n\nvar ArgView = function (_React$PureComponent2) {\n  _inherits(ArgView, _React$PureComponent2);\n\n  function ArgView() {\n    var _ref2;\n\n    var _temp2, _this2, _ret2;\n\n    _classCallCheck(this, ArgView);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = ArgView.__proto__ || Object.getPrototypeOf(ArgView)).call.apply(_ref2, [this].concat(args))), _this2), _this2._getArgSelection = function () {\n      var selection = _this2.props.selection;\n      return (selection.arguments || []).find(function (arg) {\n        return arg.name.value === _this2.props.arg.name;\n      });\n    }, _this2._removeArg = function (commit) {\n      var selection = _this2.props.selection;\n\n      var argSelection = _this2._getArgSelection();\n\n      _this2._previousArgSelection = argSelection;\n      return _this2.props.modifyArguments((selection.arguments || []).filter(function (arg) {\n        return arg !== argSelection;\n      }), commit);\n    }, _this2._addArg = function (commit) {\n      var _this2$props = _this2.props,\n          selection = _this2$props.selection,\n          getDefaultScalarArgValue = _this2$props.getDefaultScalarArgValue,\n          makeDefaultArg = _this2$props.makeDefaultArg,\n          parentField = _this2$props.parentField,\n          arg = _this2$props.arg;\n      var argType = unwrapInputType(arg.type);\n      var argSelection = null;\n\n      if (_this2._previousArgSelection) {\n        argSelection = _this2._previousArgSelection;\n      } else if ((0, _graphql.isInputObjectType)(argType)) {\n        var _fields2 = argType.getFields();\n\n        argSelection = {\n          kind: 'Argument',\n          name: {\n            kind: 'Name',\n            value: arg.name\n          },\n          value: {\n            kind: 'ObjectValue',\n            fields: defaultInputObjectFields(getDefaultScalarArgValue, makeDefaultArg, parentField, Object.keys(_fields2).map(function (k) {\n              return _fields2[k];\n            }))\n          }\n        };\n      } else if ((0, _graphql.isLeafType)(argType)) {\n        argSelection = {\n          kind: 'Argument',\n          name: {\n            kind: 'Name',\n            value: arg.name\n          },\n          value: getDefaultScalarArgValue(parentField, arg, argType)\n        };\n      }\n\n      if (!argSelection) {\n        console.error('Unable to add arg for argType', argType);\n        return null;\n      } else {\n        return _this2.props.modifyArguments([].concat(_toConsumableArray(selection.arguments || []), [argSelection]), commit);\n      }\n    }, _this2._setArgValue = function (event, options) {\n      var settingToNull = false;\n      var settingToVariable = false;\n      var settingToLiteralValue = false;\n\n      try {\n        if (event.kind === 'VariableDefinition') {\n          settingToVariable = true;\n        } else if (event === null || typeof event === 'undefined') {\n          settingToNull = true;\n        } else if (typeof event.kind === 'string') {\n          settingToLiteralValue = true;\n        }\n      } catch (e) {}\n\n      var selection = _this2.props.selection;\n\n      var argSelection = _this2._getArgSelection();\n\n      if (!argSelection && !settingToVariable) {\n        console.error('missing arg selection when setting arg value');\n        return;\n      }\n\n      var argType = unwrapInputType(_this2.props.arg.type);\n      var handleable = (0, _graphql.isLeafType)(argType) || settingToVariable || settingToNull || settingToLiteralValue;\n\n      if (!handleable) {\n        console.warn('Unable to handle non leaf types in ArgView._setArgValue');\n        return;\n      }\n\n      var targetValue = void 0;\n      var value = void 0;\n\n      if (event === null || typeof event === 'undefined') {\n        value = null;\n      } else if (event.target && typeof event.target.value === 'string') {\n        targetValue = event.target.value;\n        value = coerceArgValue(argType, targetValue);\n      } else if (!event.target && event.kind === 'VariableDefinition') {\n        targetValue = event;\n        value = targetValue.variable;\n      } else if (typeof event.kind === 'string') {\n        value = event;\n      }\n\n      return _this2.props.modifyArguments((selection.arguments || []).map(function (a) {\n        return a === argSelection ? _extends({}, a, {\n          value: value\n        }) : a;\n      }), options);\n    }, _this2._setArgFields = function (fields, commit) {\n      var selection = _this2.props.selection;\n\n      var argSelection = _this2._getArgSelection();\n\n      if (!argSelection) {\n        console.error('missing arg selection when setting arg value');\n        return;\n      }\n\n      return _this2.props.modifyArguments((selection.arguments || []).map(function (a) {\n        return a === argSelection ? _extends({}, a, {\n          value: {\n            kind: 'ObjectValue',\n            fields: fields\n          }\n        }) : a;\n      }), commit);\n    }, _temp2), _possibleConstructorReturn(_this2, _ret2);\n  }\n\n  _createClass(ArgView, [{\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          arg = _props2.arg,\n          parentField = _props2.parentField;\n\n      var argSelection = this._getArgSelection();\n\n      return React.createElement(AbstractArgView, {\n        argValue: argSelection ? argSelection.value : null,\n        arg: arg,\n        parentField: parentField,\n        addArg: this._addArg,\n        removeArg: this._removeArg,\n        setArgFields: this._setArgFields,\n        setArgValue: this._setArgValue,\n        getDefaultScalarArgValue: this.props.getDefaultScalarArgValue,\n        makeDefaultArg: this.props.makeDefaultArg,\n        onRunOperation: this.props.onRunOperation,\n        styleConfig: this.props.styleConfig,\n        onCommit: this.props.onCommit,\n        definition: this.props.definition\n      });\n    }\n  }]);\n\n  return ArgView;\n}(React.PureComponent);\n\nfunction isRunShortcut(event) {\n  return event.ctrlKey && event.key === 'Enter';\n}\n\nfunction canRunOperation(operationName) {\n  // it does not make sense to try to execute a fragment\n  return operationName !== 'FragmentDefinition';\n}\n\nvar ScalarInput = function (_React$PureComponent3) {\n  _inherits(ScalarInput, _React$PureComponent3);\n\n  function ScalarInput() {\n    var _ref3;\n\n    var _temp3, _this3, _ret3;\n\n    _classCallCheck(this, ScalarInput);\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return _ret3 = (_temp3 = (_this3 = _possibleConstructorReturn(this, (_ref3 = ScalarInput.__proto__ || Object.getPrototypeOf(ScalarInput)).call.apply(_ref3, [this].concat(args))), _this3), _this3._handleChange = function (event) {\n      _this3.props.setArgValue(event, true);\n    }, _temp3), _possibleConstructorReturn(_this3, _ret3);\n  }\n\n  _createClass(ScalarInput, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var input = this._ref;\n      var activeElement = document.activeElement;\n\n      if (input && activeElement && !(activeElement instanceof HTMLTextAreaElement)) {\n        input.focus();\n        input.setSelectionRange(0, input.value.length);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props3 = this.props,\n          arg = _props3.arg,\n          argValue = _props3.argValue,\n          styleConfig = _props3.styleConfig;\n      var argType = unwrapInputType(arg.type);\n      var value = typeof argValue.value === 'string' ? argValue.value : '';\n      var color = this.props.argValue.kind === 'StringValue' ? styleConfig.colors.string : styleConfig.colors.number;\n      return React.createElement('span', {\n        style: {\n          color: color\n        }\n      }, argType.name === 'String' ? '\"' : '', React.createElement('input', {\n        style: {\n          border: 'none',\n          borderBottom: '1px solid #888',\n          outline: 'none',\n          width: Math.max(1, Math.min(15, value.length)) + 'ch',\n          color: color\n        },\n        ref: function ref(_ref4) {\n          _this4._ref = _ref4;\n        },\n        type: 'text',\n        onChange: this._handleChange,\n        value: value\n      }), argType.name === 'String' ? '\"' : '');\n    }\n  }]);\n\n  return ScalarInput;\n}(React.PureComponent);\n\nvar AbstractArgView = function (_React$PureComponent4) {\n  _inherits(AbstractArgView, _React$PureComponent4);\n\n  function AbstractArgView() {\n    var _ref5;\n\n    var _temp4, _this5, _ret4;\n\n    _classCallCheck(this, AbstractArgView);\n\n    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return _ret4 = (_temp4 = (_this5 = _possibleConstructorReturn(this, (_ref5 = AbstractArgView.__proto__ || Object.getPrototypeOf(AbstractArgView)).call.apply(_ref5, [this].concat(args))), _this5), _this5.state = {\n      displayArgActions: false\n    }, _temp4), _possibleConstructorReturn(_this5, _ret4);\n  }\n\n  _createClass(AbstractArgView, [{\n    key: 'render',\n    value: function render() {\n      var _this6 = this;\n\n      var _props4 = this.props,\n          argValue = _props4.argValue,\n          arg = _props4.arg,\n          styleConfig = _props4.styleConfig;\n      /* TODO: handle List types*/\n\n      var argType = unwrapInputType(arg.type);\n      var input = null;\n\n      if (argValue) {\n        if (argValue.kind === 'Variable') {\n          input = React.createElement('span', {\n            style: {\n              color: styleConfig.colors.variable\n            }\n          }, '$', argValue.name.value);\n        } else if ((0, _graphql.isScalarType)(argType)) {\n          if (argType.name === 'Boolean') {\n            input = React.createElement('select', {\n              style: {\n                color: styleConfig.colors.builtin\n              },\n              onChange: this.props.setArgValue,\n              value: argValue.kind === 'BooleanValue' ? argValue.value : undefined\n            }, React.createElement('option', {\n              key: 'true',\n              value: 'true'\n            }, 'true'), React.createElement('option', {\n              key: 'false',\n              value: 'false'\n            }, 'false'));\n          } else {\n            input = React.createElement(ScalarInput, {\n              setArgValue: this.props.setArgValue,\n              arg: arg,\n              argValue: argValue,\n              onRunOperation: this.props.onRunOperation,\n              styleConfig: this.props.styleConfig\n            });\n          }\n        } else if ((0, _graphql.isEnumType)(argType)) {\n          if (argValue.kind === 'EnumValue') {\n            input = React.createElement('select', {\n              style: {\n                backgroundColor: 'white',\n                color: styleConfig.colors.string2\n              },\n              onChange: this.props.setArgValue,\n              value: argValue.value\n            }, argType.getValues().map(function (value) {\n              return React.createElement('option', {\n                key: value.name,\n                value: value.name\n              }, value.name);\n            }));\n          } else {\n            console.error('arg mismatch between arg and selection', argType, argValue);\n          }\n        } else if ((0, _graphql.isInputObjectType)(argType)) {\n          if (argValue.kind === 'ObjectValue') {\n            var _fields3 = argType.getFields();\n\n            input = React.createElement('div', {\n              style: {\n                marginLeft: 16\n              }\n            }, Object.keys(_fields3).sort().map(function (fieldName) {\n              return React.createElement(InputArgView, {\n                key: fieldName,\n                arg: _fields3[fieldName],\n                parentField: _this6.props.parentField,\n                selection: argValue,\n                modifyFields: _this6.props.setArgFields,\n                getDefaultScalarArgValue: _this6.props.getDefaultScalarArgValue,\n                makeDefaultArg: _this6.props.makeDefaultArg,\n                onRunOperation: _this6.props.onRunOperation,\n                styleConfig: _this6.props.styleConfig,\n                onCommit: _this6.props.onCommit,\n                definition: _this6.props.definition\n              });\n            }));\n          } else {\n            console.error('arg mismatch between arg and selection', argType, argValue);\n          }\n        }\n      }\n\n      var variablize = function variablize() {\n        /**\n        1. Find current operation variables\n        2. Find current arg value\n        3. Create a new variable\n        4. Replace current arg value with variable\n        5. Add variable to operation\n        */\n        var baseVariableName = arg.name;\n        var conflictingNameCount = (_this6.props.definition.variableDefinitions || []).filter(function (varDef) {\n          return varDef.variable.name.value.startsWith(baseVariableName);\n        }).length;\n        var variableName = void 0;\n\n        if (conflictingNameCount > 0) {\n          variableName = '' + baseVariableName + conflictingNameCount;\n        } else {\n          variableName = baseVariableName;\n        } // To get an AST definition of our variable from the instantiated arg,\n        // we print it to a string, then parseType to get our AST.\n\n\n        var argPrintedType = arg.type.toString();\n        var argType = (0, _graphql.parseType)(argPrintedType);\n        var base = {\n          kind: 'VariableDefinition',\n          variable: {\n            kind: 'Variable',\n            name: {\n              kind: 'Name',\n              value: variableName\n            }\n          },\n          type: argType,\n          directives: []\n        };\n\n        var variableDefinitionByName = function variableDefinitionByName(name) {\n          return (_this6.props.definition.variableDefinitions || []).find(function (varDef) {\n            return varDef.variable.name.value === name;\n          });\n        };\n\n        var variable = void 0;\n        var subVariableUsageCountByName = {};\n\n        if (typeof argValue !== 'undefined' && argValue !== null) {\n          /** In the process of devariabilizing descendent selections,\n           * we may have caused their variable definitions to become unused.\n           * Keep track and remove any variable definitions with 1 or fewer usages.\n           * */\n          var cleanedDefaultValue = (0, _graphql.visit)(argValue, {\n            Variable: function Variable(node) {\n              var varName = node.name.value;\n              var varDef = variableDefinitionByName(varName);\n              subVariableUsageCountByName[varName] = subVariableUsageCountByName[varName] + 1 || 1;\n\n              if (!varDef) {\n                return;\n              }\n\n              return varDef.defaultValue;\n            }\n          });\n          var isNonNullable = base.type.kind === 'NonNullType'; // We're going to give the variable definition a default value, so we must make its type nullable\n\n          var unwrappedBase = isNonNullable ? _extends({}, base, {\n            type: base.type.type\n          }) : base;\n          variable = _extends({}, unwrappedBase, {\n            defaultValue: cleanedDefaultValue\n          });\n        } else {\n          variable = base;\n        }\n\n        var newlyUnusedVariables = Object.entries(subVariableUsageCountByName) // $FlowFixMe: Can't get Object.entries to realize usageCount *must* be a number\n        .filter(function (_ref6) {\n          var _ref7 = _slicedToArray(_ref6, 2),\n              _ = _ref7[0],\n              usageCount = _ref7[1];\n\n          return usageCount < 2;\n        }).map(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n              varName = _ref9[0],\n              _ = _ref9[1];\n\n          return varName;\n        });\n\n        if (variable) {\n          var _newDoc = _this6.props.setArgValue(variable, false);\n\n          if (_newDoc) {\n            var targetOperation = _newDoc.definitions.find(function (definition) {\n              if (!!definition.operation && !!definition.name && !!definition.name.value && //\n              !!_this6.props.definition.name && !!_this6.props.definition.name.value) {\n                return definition.name.value === _this6.props.definition.name.value;\n              } else {\n                return false;\n              }\n            });\n\n            var newVariableDefinitions = [].concat(_toConsumableArray(targetOperation.variableDefinitions || []), [variable]).filter(function (varDef) {\n              return newlyUnusedVariables.indexOf(varDef.variable.name.value) === -1;\n            });\n\n            var newOperation = _extends({}, targetOperation, {\n              variableDefinitions: newVariableDefinitions\n            });\n\n            var existingDefs = _newDoc.definitions;\n            var newDefinitions = existingDefs.map(function (existingOperation) {\n              if (targetOperation === existingOperation) {\n                return newOperation;\n              } else {\n                return existingOperation;\n              }\n            });\n\n            var finalDoc = _extends({}, _newDoc, {\n              definitions: newDefinitions\n            });\n\n            _this6.props.onCommit(finalDoc);\n          }\n        }\n      };\n\n      var devariablize = function devariablize() {\n        /**\n         * 1. Find the current variable definition in the operation def\n         * 2. Extract its value\n         * 3. Replace the current arg value\n         * 4. Visit the resulting operation to see if there are any other usages of the variable\n         * 5. If not, remove the variableDefinition\n         */\n        if (!argValue || !argValue.name || !argValue.name.value) {\n          return;\n        }\n\n        var variableName = argValue.name.value;\n        var variableDefinition = (_this6.props.definition.variableDefinitions || []).find(function (varDef) {\n          return varDef.variable.name.value === variableName;\n        });\n\n        if (!variableDefinition) {\n          return;\n        }\n\n        var defaultValue = variableDefinition.defaultValue;\n\n        var newDoc = _this6.props.setArgValue(defaultValue, {\n          commit: false\n        });\n\n        if (newDoc) {\n          var targetOperation = newDoc.definitions.find(function (definition) {\n            return definition.name.value === _this6.props.definition.name.value;\n          });\n\n          if (!targetOperation) {\n            return;\n          } // After de-variabilizing, see if the variable is still in use. If not, remove it.\n\n\n          var variableUseCount = 0;\n          (0, _graphql.visit)(targetOperation, {\n            Variable: function Variable(node) {\n              if (node.name.value === variableName) {\n                variableUseCount = variableUseCount + 1;\n              }\n            }\n          });\n          var newVariableDefinitions = targetOperation.variableDefinitions || []; // A variable is in use if it shows up at least twice (once in the definition, once in the selection)\n\n          if (variableUseCount < 2) {\n            newVariableDefinitions = newVariableDefinitions.filter(function (varDef) {\n              return varDef.variable.name.value !== variableName;\n            });\n          }\n\n          var newOperation = _extends({}, targetOperation, {\n            variableDefinitions: newVariableDefinitions\n          });\n\n          var existingDefs = newDoc.definitions;\n          var newDefinitions = existingDefs.map(function (existingOperation) {\n            if (targetOperation === existingOperation) {\n              return newOperation;\n            } else {\n              return existingOperation;\n            }\n          });\n\n          var finalDoc = _extends({}, newDoc, {\n            definitions: newDefinitions\n          });\n\n          _this6.props.onCommit(finalDoc);\n        }\n      };\n\n      var isArgValueVariable = argValue && argValue.kind === 'Variable';\n      var variablizeActionButton = !this.state.displayArgActions ? null : React.createElement('button', {\n        type: 'submit',\n        className: 'toolbar-button',\n        title: isArgValueVariable ? 'Remove the variable' : 'Extract the current value into a GraphQL variable',\n        onClick: function onClick(event) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          if (isArgValueVariable) {\n            devariablize();\n          } else {\n            variablize();\n          }\n        },\n        style: styleConfig.styles.actionButtonStyle\n      }, React.createElement('span', {\n        style: {\n          color: styleConfig.colors.variable\n        }\n      }, '$'));\n      return React.createElement('div', {\n        style: {\n          cursor: 'pointer',\n          minHeight: '16px',\n          WebkitUserSelect: 'none',\n          userSelect: 'none'\n        },\n        'data-arg-name': arg.name,\n        'data-arg-type': argType.name,\n        className: 'graphiql-explorer-' + arg.name\n      }, React.createElement('span', {\n        style: {\n          cursor: 'pointer'\n        },\n        onClick: function onClick(event) {\n          var shouldAdd = !argValue;\n\n          if (shouldAdd) {\n            _this6.props.addArg(true);\n          } else {\n            _this6.props.removeArg(true);\n          }\n\n          _this6.setState({\n            displayArgActions: shouldAdd\n          });\n        }\n      }, (0, _graphql.isInputObjectType)(argType) ? React.createElement('span', null, !!argValue ? this.props.styleConfig.arrowOpen : this.props.styleConfig.arrowClosed) : React.createElement(Checkbox, {\n        checked: !!argValue,\n        styleConfig: this.props.styleConfig\n      }), React.createElement('span', {\n        style: {\n          color: styleConfig.colors.attribute\n        },\n        title: arg.description,\n        onMouseEnter: function onMouseEnter() {\n          // Make implementation a bit easier and only show 'variablize' action if arg is already added\n          if (argValue !== null && typeof argValue !== 'undefined') {\n            _this6.setState({\n              displayArgActions: true\n            });\n          }\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this6.setState({\n            displayArgActions: false\n          });\n        }\n      }, arg.name, isRequiredArgument(arg) ? '*' : '', ': ', variablizeActionButton, ' '), ' '), input || React.createElement('span', null), ' ');\n    }\n  }]);\n\n  return AbstractArgView;\n}(React.PureComponent);\n\nvar AbstractView = function (_React$PureComponent5) {\n  _inherits(AbstractView, _React$PureComponent5);\n\n  function AbstractView() {\n    var _ref10;\n\n    var _temp5, _this7, _ret5;\n\n    _classCallCheck(this, AbstractView);\n\n    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    return _ret5 = (_temp5 = (_this7 = _possibleConstructorReturn(this, (_ref10 = AbstractView.__proto__ || Object.getPrototypeOf(AbstractView)).call.apply(_ref10, [this].concat(args))), _this7), _this7._addFragment = function () {\n      _this7.props.modifySelections([].concat(_toConsumableArray(_this7.props.selections), [_this7._previousSelection || {\n        kind: 'InlineFragment',\n        typeCondition: {\n          kind: 'NamedType',\n          name: {\n            kind: 'Name',\n            value: _this7.props.implementingType.name\n          }\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: _this7.props.getDefaultFieldNames(_this7.props.implementingType).map(function (fieldName) {\n            return {\n              kind: 'Field',\n              name: {\n                kind: 'Name',\n                value: fieldName\n              }\n            };\n          })\n        }\n      }]));\n    }, _this7._removeFragment = function () {\n      var thisSelection = _this7._getSelection();\n\n      _this7._previousSelection = thisSelection;\n\n      _this7.props.modifySelections(_this7.props.selections.filter(function (s) {\n        return s !== thisSelection;\n      }));\n    }, _this7._getSelection = function () {\n      var selection = _this7.props.selections.find(function (selection) {\n        return selection.kind === 'InlineFragment' && selection.typeCondition && _this7.props.implementingType.name === selection.typeCondition.name.value;\n      });\n\n      if (!selection) {\n        return null;\n      }\n\n      if (selection.kind === 'InlineFragment') {\n        return selection;\n      }\n    }, _this7._modifyChildSelections = function (selections, options) {\n      var thisSelection = _this7._getSelection();\n\n      return _this7.props.modifySelections(_this7.props.selections.map(function (selection) {\n        if (selection === thisSelection) {\n          return {\n            directives: selection.directives,\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: {\n                kind: 'Name',\n                value: _this7.props.implementingType.name\n              }\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: selections\n            }\n          };\n        }\n\n        return selection;\n      }), options);\n    }, _temp5), _possibleConstructorReturn(_this7, _ret5);\n  }\n\n  _createClass(AbstractView, [{\n    key: 'render',\n    value: function render() {\n      var _this8 = this;\n\n      var _props5 = this.props,\n          implementingType = _props5.implementingType,\n          schema = _props5.schema,\n          getDefaultFieldNames = _props5.getDefaultFieldNames,\n          styleConfig = _props5.styleConfig;\n\n      var selection = this._getSelection();\n\n      var fields = implementingType.getFields();\n      var childSelections = selection ? selection.selectionSet ? selection.selectionSet.selections : [] : [];\n      return React.createElement('div', {\n        className: 'graphiql-explorer-' + implementingType.name\n      }, React.createElement('span', {\n        style: {\n          cursor: 'pointer'\n        },\n        onClick: selection ? this._removeFragment : this._addFragment\n      }, React.createElement(Checkbox, {\n        checked: !!selection,\n        styleConfig: this.props.styleConfig\n      }), React.createElement('span', {\n        style: {\n          color: styleConfig.colors.atom\n        }\n      }, this.props.implementingType.name)), selection ? React.createElement('div', {\n        style: {\n          marginLeft: 16\n        }\n      }, Object.keys(fields).sort().map(function (fieldName) {\n        return React.createElement(FieldView, {\n          key: fieldName,\n          field: fields[fieldName],\n          selections: childSelections,\n          modifySelections: _this8._modifyChildSelections,\n          schema: schema,\n          getDefaultFieldNames: getDefaultFieldNames,\n          getDefaultScalarArgValue: _this8.props.getDefaultScalarArgValue,\n          makeDefaultArg: _this8.props.makeDefaultArg,\n          onRunOperation: _this8.props.onRunOperation,\n          onCommit: _this8.props.onCommit,\n          styleConfig: _this8.props.styleConfig,\n          definition: _this8.props.definition,\n          availableFragments: _this8.props.availableFragments\n        });\n      })) : null);\n    }\n  }]);\n\n  return AbstractView;\n}(React.PureComponent);\n\nvar FragmentView = function (_React$PureComponent6) {\n  _inherits(FragmentView, _React$PureComponent6);\n\n  function FragmentView() {\n    var _ref11;\n\n    var _temp6, _this9, _ret6;\n\n    _classCallCheck(this, FragmentView);\n\n    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    return _ret6 = (_temp6 = (_this9 = _possibleConstructorReturn(this, (_ref11 = FragmentView.__proto__ || Object.getPrototypeOf(FragmentView)).call.apply(_ref11, [this].concat(args))), _this9), _this9._addFragment = function () {\n      _this9.props.modifySelections([].concat(_toConsumableArray(_this9.props.selections), [_this9._previousSelection || {\n        kind: 'FragmentSpread',\n        name: _this9.props.fragment.name\n      }]));\n    }, _this9._removeFragment = function () {\n      var thisSelection = _this9._getSelection();\n\n      _this9._previousSelection = thisSelection;\n\n      _this9.props.modifySelections(_this9.props.selections.filter(function (s) {\n        var isTargetSelection = s.kind === 'FragmentSpread' && s.name.value === _this9.props.fragment.name.value;\n        return !isTargetSelection;\n      }));\n    }, _this9._getSelection = function () {\n      var selection = _this9.props.selections.find(function (selection) {\n        return selection.kind === 'FragmentSpread' && selection.name.value === _this9.props.fragment.name.value;\n      });\n\n      return selection;\n    }, _temp6), _possibleConstructorReturn(_this9, _ret6);\n  }\n\n  _createClass(FragmentView, [{\n    key: 'render',\n    value: function render() {\n      var styleConfig = this.props.styleConfig;\n\n      var selection = this._getSelection();\n\n      return React.createElement('div', {\n        className: 'graphiql-explorer-' + this.props.fragment.name.value\n      }, React.createElement('span', {\n        style: {\n          cursor: 'pointer'\n        },\n        onClick: selection ? this._removeFragment : this._addFragment\n      }, React.createElement(Checkbox, {\n        checked: !!selection,\n        styleConfig: this.props.styleConfig\n      }), React.createElement('span', {\n        style: {\n          color: styleConfig.colors.def\n        },\n        className: 'graphiql-explorer-' + this.props.fragment.name.value\n      }, this.props.fragment.name.value)));\n    }\n  }]);\n\n  return FragmentView;\n}(React.PureComponent);\n\nfunction defaultInputObjectFields(getDefaultScalarArgValue, makeDefaultArg, parentField, fields) {\n  var nodes = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _field = _step.value;\n\n      if ((0, _graphql.isRequiredInputField)(_field) || makeDefaultArg && makeDefaultArg(parentField, _field)) {\n        var fieldType = unwrapInputType(_field.type);\n\n        if ((0, _graphql.isInputObjectType)(fieldType)) {\n          (function () {\n            var fields = fieldType.getFields();\n            nodes.push({\n              kind: 'ObjectField',\n              name: {\n                kind: 'Name',\n                value: _field.name\n              },\n              value: {\n                kind: 'ObjectValue',\n                fields: defaultInputObjectFields(getDefaultScalarArgValue, makeDefaultArg, parentField, Object.keys(fields).map(function (k) {\n                  return fields[k];\n                }))\n              }\n            });\n          })();\n        } else if ((0, _graphql.isLeafType)(fieldType)) {\n          nodes.push({\n            kind: 'ObjectField',\n            name: {\n              kind: 'Name',\n              value: _field.name\n            },\n            value: getDefaultScalarArgValue(parentField, _field, fieldType)\n          });\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return nodes;\n}\n\nfunction defaultArgs(getDefaultScalarArgValue, makeDefaultArg, field) {\n  var args = [];\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = field.args[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _arg = _step2.value;\n\n      if (isRequiredArgument(_arg) || makeDefaultArg && makeDefaultArg(field, _arg)) {\n        var argType = unwrapInputType(_arg.type);\n\n        if ((0, _graphql.isInputObjectType)(argType)) {\n          (function () {\n            var fields = argType.getFields();\n            args.push({\n              kind: 'Argument',\n              name: {\n                kind: 'Name',\n                value: _arg.name\n              },\n              value: {\n                kind: 'ObjectValue',\n                fields: defaultInputObjectFields(getDefaultScalarArgValue, makeDefaultArg, field, Object.keys(fields).map(function (k) {\n                  return fields[k];\n                }))\n              }\n            });\n          })();\n        } else if ((0, _graphql.isLeafType)(argType)) {\n          args.push({\n            kind: 'Argument',\n            name: {\n              kind: 'Name',\n              value: _arg.name\n            },\n            value: getDefaultScalarArgValue(field, _arg, argType)\n          });\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return args;\n}\n\nvar FieldView = function (_React$PureComponent7) {\n  _inherits(FieldView, _React$PureComponent7);\n\n  function FieldView() {\n    var _ref12;\n\n    var _temp7, _this10, _ret9;\n\n    _classCallCheck(this, FieldView);\n\n    for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    return _ret9 = (_temp7 = (_this10 = _possibleConstructorReturn(this, (_ref12 = FieldView.__proto__ || Object.getPrototypeOf(FieldView)).call.apply(_ref12, [this].concat(args))), _this10), _this10.state = {\n      displayFieldActions: false\n    }, _this10._addAllFieldsToSelections = function (rawSubfields) {\n      var subFields = !!rawSubfields ? Object.keys(rawSubfields).map(function (fieldName) {\n        return {\n          kind: 'Field',\n          name: {\n            kind: 'Name',\n            value: fieldName\n          },\n          arguments: []\n        };\n      }) : [];\n      var subSelectionSet = {\n        kind: 'SelectionSet',\n        selections: subFields\n      };\n      var nextSelections = [].concat(_toConsumableArray(_this10.props.selections.filter(function (selection) {\n        if (selection.kind === 'InlineFragment') {\n          return true;\n        } else {\n          // Remove the current selection set for the target field\n          return selection.name.value !== _this10.props.field.name;\n        }\n      })), [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: _this10.props.field.name\n        },\n        arguments: defaultArgs(_this10.props.getDefaultScalarArgValue, _this10.props.makeDefaultArg, _this10.props.field),\n        selectionSet: subSelectionSet\n      }]);\n\n      _this10.props.modifySelections(nextSelections);\n    }, _this10._addFieldToSelections = function (rawSubfields) {\n      var nextSelections = [].concat(_toConsumableArray(_this10.props.selections), [_this10._previousSelection || {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: _this10.props.field.name\n        },\n        arguments: defaultArgs(_this10.props.getDefaultScalarArgValue, _this10.props.makeDefaultArg, _this10.props.field)\n      }]);\n\n      _this10.props.modifySelections(nextSelections);\n    }, _this10._handleUpdateSelections = function (event) {\n      var selection = _this10._getSelection();\n\n      if (selection && !event.altKey) {\n        _this10._removeFieldFromSelections();\n      } else {\n        var fieldType = (0, _graphql.getNamedType)(_this10.props.field.type);\n        var rawSubfields = (0, _graphql.isObjectType)(fieldType) && fieldType.getFields();\n        var shouldSelectAllSubfields = !!rawSubfields && event.altKey;\n        shouldSelectAllSubfields ? _this10._addAllFieldsToSelections(rawSubfields) : _this10._addFieldToSelections(rawSubfields);\n      }\n    }, _this10._removeFieldFromSelections = function () {\n      var previousSelection = _this10._getSelection();\n\n      _this10._previousSelection = previousSelection;\n\n      _this10.props.modifySelections(_this10.props.selections.filter(function (selection) {\n        return selection !== previousSelection;\n      }));\n    }, _this10._getSelection = function () {\n      var selection = _this10.props.selections.find(function (selection) {\n        return selection.kind === 'Field' && _this10.props.field.name === selection.name.value;\n      });\n\n      if (!selection) {\n        return null;\n      }\n\n      if (selection.kind === 'Field') {\n        return selection;\n      }\n    }, _this10._setArguments = function (argumentNodes, options) {\n      var selection = _this10._getSelection();\n\n      if (!selection) {\n        console.error('Missing selection when setting arguments', argumentNodes);\n        return;\n      }\n\n      return _this10.props.modifySelections(_this10.props.selections.map(function (s) {\n        return s === selection ? {\n          alias: selection.alias,\n          arguments: argumentNodes,\n          directives: selection.directives,\n          kind: 'Field',\n          name: selection.name,\n          selectionSet: selection.selectionSet\n        } : s;\n      }), options);\n    }, _this10._modifyChildSelections = function (selections, options) {\n      return _this10.props.modifySelections(_this10.props.selections.map(function (selection) {\n        if (selection.kind === 'Field' && _this10.props.field.name === selection.name.value) {\n          if (selection.kind !== 'Field') {\n            throw new Error('invalid selection');\n          }\n\n          return {\n            alias: selection.alias,\n            arguments: selection.arguments,\n            directives: selection.directives,\n            kind: 'Field',\n            name: selection.name,\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: selections\n            }\n          };\n        }\n\n        return selection;\n      }), options);\n    }, _temp7), _possibleConstructorReturn(_this10, _ret9);\n  }\n\n  _createClass(FieldView, [{\n    key: 'render',\n    value: function render() {\n      var _this11 = this;\n\n      var _props6 = this.props,\n          field = _props6.field,\n          schema = _props6.schema,\n          getDefaultFieldNames = _props6.getDefaultFieldNames,\n          styleConfig = _props6.styleConfig;\n\n      var selection = this._getSelection();\n\n      var type = unwrapOutputType(field.type);\n      var args = field.args.sort(function (a, b) {\n        return a.name.localeCompare(b.name);\n      });\n      var className = 'graphiql-explorer-node graphiql-explorer-' + field.name;\n\n      if (field.isDeprecated) {\n        className += ' graphiql-explorer-deprecated';\n      }\n\n      var applicableFragments = (0, _graphql.isObjectType)(type) || (0, _graphql.isInterfaceType)(type) || (0, _graphql.isUnionType)(type) ? this.props.availableFragments && this.props.availableFragments[type.name] : null;\n      var node = React.createElement('div', {\n        className: className\n      }, React.createElement('span', {\n        title: field.description,\n        style: {\n          cursor: 'pointer',\n          display: 'inline-flex',\n          alignItems: 'center',\n          minHeight: '16px',\n          WebkitUserSelect: 'none',\n          userSelect: 'none'\n        },\n        'data-field-name': field.name,\n        'data-field-type': type.name,\n        onClick: this._handleUpdateSelections,\n        onMouseEnter: function onMouseEnter() {\n          var containsMeaningfulSubselection = (0, _graphql.isObjectType)(type) && selection && selection.selectionSet && selection.selectionSet.selections.filter(function (selection) {\n            return selection.kind !== 'FragmentSpread';\n          }).length > 0;\n\n          if (containsMeaningfulSubselection) {\n            _this11.setState({\n              displayFieldActions: true\n            });\n          }\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this11.setState({\n            displayFieldActions: false\n          });\n        }\n      }, (0, _graphql.isObjectType)(type) ? React.createElement('span', null, !!selection ? this.props.styleConfig.arrowOpen : this.props.styleConfig.arrowClosed) : null, (0, _graphql.isObjectType)(type) ? null : React.createElement(Checkbox, {\n        checked: !!selection,\n        styleConfig: this.props.styleConfig\n      }), React.createElement('span', {\n        style: {\n          color: styleConfig.colors.property\n        },\n        className: 'graphiql-explorer-field-view'\n      }, field.name), !this.state.displayFieldActions ? null : React.createElement('button', {\n        type: 'submit',\n        className: 'toolbar-button',\n        title: 'Extract selections into a new reusable fragment',\n        onClick: function onClick(event) {\n          event.preventDefault();\n          event.stopPropagation(); // 1. Create a fragment spread node\n          // 2. Copy selections from this object to fragment\n          // 3. Replace selections in this object with fragment spread\n          // 4. Add fragment to document\n\n          var typeName = type.name;\n          var newFragmentName = typeName + 'Fragment';\n          var conflictingNameCount = (applicableFragments || []).filter(function (fragment) {\n            return fragment.name.value.startsWith(newFragmentName);\n          }).length;\n\n          if (conflictingNameCount > 0) {\n            newFragmentName = '' + newFragmentName + conflictingNameCount;\n          }\n\n          var childSelections = selection ? selection.selectionSet ? selection.selectionSet.selections : [] : [];\n          var nextSelections = [{\n            kind: 'FragmentSpread',\n            name: {\n              kind: 'Name',\n              value: newFragmentName\n            },\n            directives: []\n          }];\n          var newFragmentDefinition = {\n            kind: 'FragmentDefinition',\n            name: {\n              kind: 'Name',\n              value: newFragmentName\n            },\n            typeCondition: {\n              kind: 'NamedType',\n              name: {\n                kind: 'Name',\n                value: type.name\n              }\n            },\n            directives: [],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: childSelections\n            }\n          };\n\n          var newDoc = _this11._modifyChildSelections(nextSelections, false);\n\n          if (newDoc) {\n            var newDocWithFragment = _extends({}, newDoc, {\n              definitions: [].concat(_toConsumableArray(newDoc.definitions), [newFragmentDefinition])\n            });\n\n            _this11.props.onCommit(newDocWithFragment);\n          } else {\n            console.warn('Unable to complete extractFragment operation');\n          }\n        },\n        style: _extends({}, styleConfig.styles.actionButtonStyle)\n      }, React.createElement('span', null, '…'))), selection && args.length ? React.createElement('div', {\n        style: {\n          marginLeft: 16\n        },\n        className: 'graphiql-explorer-graphql-arguments'\n      }, args.map(function (arg) {\n        return React.createElement(ArgView, {\n          key: arg.name,\n          parentField: field,\n          arg: arg,\n          selection: selection,\n          modifyArguments: _this11._setArguments,\n          getDefaultScalarArgValue: _this11.props.getDefaultScalarArgValue,\n          makeDefaultArg: _this11.props.makeDefaultArg,\n          onRunOperation: _this11.props.onRunOperation,\n          styleConfig: _this11.props.styleConfig,\n          onCommit: _this11.props.onCommit,\n          definition: _this11.props.definition\n        });\n      })) : null);\n\n      if (selection && ((0, _graphql.isObjectType)(type) || (0, _graphql.isInterfaceType)(type) || (0, _graphql.isUnionType)(type))) {\n        var _fields4 = (0, _graphql.isUnionType)(type) ? {} : type.getFields();\n\n        var childSelections = selection ? selection.selectionSet ? selection.selectionSet.selections : [] : [];\n        return React.createElement('div', {\n          className: 'graphiql-explorer-' + field.name\n        }, node, React.createElement('div', {\n          style: {\n            marginLeft: 16\n          }\n        }, !!applicableFragments ? applicableFragments.map(function (fragment) {\n          var type = schema.getType(fragment.typeCondition.name.value);\n          var fragmentName = fragment.name.value;\n          return !type ? null : React.createElement(FragmentView, {\n            key: fragmentName,\n            fragment: fragment,\n            selections: childSelections,\n            modifySelections: _this11._modifyChildSelections,\n            schema: schema,\n            styleConfig: _this11.props.styleConfig,\n            onCommit: _this11.props.onCommit\n          });\n        }) : null, Object.keys(_fields4).sort().map(function (fieldName) {\n          return React.createElement(FieldView, {\n            key: fieldName,\n            field: _fields4[fieldName],\n            selections: childSelections,\n            modifySelections: _this11._modifyChildSelections,\n            schema: schema,\n            getDefaultFieldNames: getDefaultFieldNames,\n            getDefaultScalarArgValue: _this11.props.getDefaultScalarArgValue,\n            makeDefaultArg: _this11.props.makeDefaultArg,\n            onRunOperation: _this11.props.onRunOperation,\n            styleConfig: _this11.props.styleConfig,\n            onCommit: _this11.props.onCommit,\n            definition: _this11.props.definition,\n            availableFragments: _this11.props.availableFragments\n          });\n        }), (0, _graphql.isInterfaceType)(type) || (0, _graphql.isUnionType)(type) ? schema.getPossibleTypes(type).map(function (type) {\n          return React.createElement(AbstractView, {\n            key: type.name,\n            implementingType: type,\n            selections: childSelections,\n            modifySelections: _this11._modifyChildSelections,\n            schema: schema,\n            getDefaultFieldNames: getDefaultFieldNames,\n            getDefaultScalarArgValue: _this11.props.getDefaultScalarArgValue,\n            makeDefaultArg: _this11.props.makeDefaultArg,\n            onRunOperation: _this11.props.onRunOperation,\n            styleConfig: _this11.props.styleConfig,\n            onCommit: _this11.props.onCommit,\n            definition: _this11.props.definition\n          });\n        }) : null));\n      }\n\n      return node;\n    }\n  }]);\n\n  return FieldView;\n}(React.PureComponent);\n\nfunction parseQuery(text) {\n  try {\n    if (!text.trim()) {\n      return null;\n    }\n\n    return (0, _graphql.parse)(text, // Tell graphql to not bother track locations when parsing, we don't need\n    // it and it's a tiny bit more expensive.\n    {\n      noLocation: true\n    });\n  } catch (e) {\n    return new Error(e);\n  }\n}\n\nvar DEFAULT_OPERATION = {\n  kind: 'OperationDefinition',\n  operation: 'query',\n  variableDefinitions: [],\n  name: {\n    kind: 'Name',\n    value: 'MyQuery'\n  },\n  directives: [],\n  selectionSet: {\n    kind: 'SelectionSet',\n    selections: []\n  }\n};\nvar DEFAULT_DOCUMENT = {\n  kind: 'Document',\n  definitions: [DEFAULT_OPERATION]\n};\nvar parseQueryMemoize = null;\n\nfunction memoizeParseQuery(query) {\n  if (parseQueryMemoize && parseQueryMemoize[0] === query) {\n    return parseQueryMemoize[1];\n  } else {\n    var result = parseQuery(query);\n\n    if (!result) {\n      return DEFAULT_DOCUMENT;\n    } else if (result instanceof Error) {\n      if (parseQueryMemoize) {\n        // Most likely a temporarily invalid query while they type\n        return parseQueryMemoize[1];\n      } else {\n        return DEFAULT_DOCUMENT;\n      }\n    } else {\n      parseQueryMemoize = [query, result];\n      return result;\n    }\n  }\n}\n\nvar defaultStyles = {\n  buttonStyle: {\n    fontSize: '1.2em',\n    padding: '0px',\n    backgroundColor: 'white',\n    border: 'none',\n    margin: '5px 0px',\n    height: '40px',\n    width: '100%',\n    display: 'block',\n    maxWidth: 'none'\n  },\n  actionButtonStyle: {\n    padding: '0px',\n    backgroundColor: 'white',\n    border: 'none',\n    margin: '0px',\n    maxWidth: 'none',\n    height: '15px',\n    width: '15px',\n    display: 'inline-block',\n    fontSize: 'smaller'\n  },\n  explorerActionsStyle: {\n    margin: '4px -8px -8px',\n    paddingLeft: '8px',\n    bottom: '0px',\n    width: '100%',\n    textAlign: 'center',\n    background: 'none',\n    borderTop: 'none',\n    borderBottom: 'none'\n  }\n};\n\nvar RootView = function (_React$PureComponent8) {\n  _inherits(RootView, _React$PureComponent8);\n\n  function RootView() {\n    var _ref13;\n\n    var _temp8, _this12, _ret10;\n\n    _classCallCheck(this, RootView);\n\n    for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    return _ret10 = (_temp8 = (_this12 = _possibleConstructorReturn(this, (_ref13 = RootView.__proto__ || Object.getPrototypeOf(RootView)).call.apply(_ref13, [this].concat(args))), _this12), _this12.state = {\n      newOperationType: 'query',\n      displayTitleActions: false\n    }, _this12._modifySelections = function (selections, options) {\n      var operationDef = _this12.props.definition;\n\n      if (operationDef.selectionSet.selections.length === 0 && _this12._previousOperationDef) {\n        operationDef = _this12._previousOperationDef;\n      }\n\n      var newOperationDef = void 0;\n\n      if (operationDef.kind === 'FragmentDefinition') {\n        newOperationDef = _extends({}, operationDef, {\n          selectionSet: _extends({}, operationDef.selectionSet, {\n            selections: selections\n          })\n        });\n      } else if (operationDef.kind === 'OperationDefinition') {\n        var cleanedSelections = selections.filter(function (selection) {\n          return !(selection.kind === 'Field' && selection.name.value === '__typename');\n        });\n\n        if (cleanedSelections.length === 0) {\n          cleanedSelections = [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: '__typename ## Placeholder value'\n            }\n          }];\n        }\n\n        newOperationDef = _extends({}, operationDef, {\n          selectionSet: _extends({}, operationDef.selectionSet, {\n            selections: cleanedSelections\n          })\n        });\n      }\n\n      return _this12.props.onEdit(newOperationDef, options);\n    }, _this12._onOperationRename = function (event) {\n      return _this12.props.onOperationRename(event.target.value);\n    }, _this12._handlePotentialRun = function (event) {\n      if (isRunShortcut(event) && canRunOperation(_this12.props.definition.kind)) {\n        _this12.props.onRunOperation(_this12.props.name);\n      }\n    }, _this12._rootViewElId = function () {\n      var _this12$props = _this12.props,\n          operationType = _this12$props.operationType,\n          name = _this12$props.name;\n      var rootViewElId = operationType + '-' + (name || 'unknown');\n      return rootViewElId;\n    }, _temp8), _possibleConstructorReturn(_this12, _ret10);\n  }\n\n  _createClass(RootView, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var rootViewElId = this._rootViewElId();\n\n      this.props.onMount(rootViewElId);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this13 = this;\n\n      var _props7 = this.props,\n          operationType = _props7.operationType,\n          definition = _props7.definition,\n          schema = _props7.schema,\n          getDefaultFieldNames = _props7.getDefaultFieldNames,\n          styleConfig = _props7.styleConfig;\n\n      var rootViewElId = this._rootViewElId();\n\n      var fields = this.props.fields || {};\n      var operationDef = definition;\n      var selections = operationDef.selectionSet.selections;\n      var operationDisplayName = this.props.name || capitalize(operationType) + ' Name';\n      return React.createElement('div', {\n        id: rootViewElId,\n        tabIndex: '0',\n        onKeyDown: this._handlePotentialRun,\n        style: {\n          // The actions bar has its own top border\n          borderBottom: this.props.isLast ? 'none' : '1px solid #d6d6d6',\n          marginBottom: '0em',\n          paddingBottom: '1em'\n        }\n      }, React.createElement('div', {\n        style: {\n          color: styleConfig.colors.keyword,\n          paddingBottom: 4\n        },\n        className: 'graphiql-operation-title-bar',\n        onMouseEnter: function onMouseEnter() {\n          return _this13.setState({\n            displayTitleActions: true\n          });\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this13.setState({\n            displayTitleActions: false\n          });\n        }\n      }, operationType, ' ', React.createElement('span', {\n        style: {\n          color: styleConfig.colors.def\n        }\n      }, React.createElement('input', {\n        style: {\n          color: styleConfig.colors.def,\n          border: 'none',\n          borderBottom: '1px solid #888',\n          outline: 'none',\n          width: Math.max(4, operationDisplayName.length) + 'ch'\n        },\n        autoComplete: 'false',\n        placeholder: capitalize(operationType) + ' Name',\n        value: this.props.name,\n        onKeyDown: this._handlePotentialRun,\n        onChange: this._onOperationRename\n      })), !!this.props.onTypeName ? React.createElement('span', null, React.createElement('br', null), 'on ' + this.props.onTypeName) : '', !!this.state.displayTitleActions ? React.createElement(React.Fragment, null, React.createElement('button', {\n        type: 'submit',\n        className: 'toolbar-button',\n        onClick: function onClick() {\n          return _this13.props.onOperationDestroy();\n        },\n        style: _extends({}, styleConfig.styles.actionButtonStyle)\n      }, React.createElement('span', null, \"\\u2715\")), React.createElement('button', {\n        type: 'submit',\n        className: 'toolbar-button',\n        onClick: function onClick() {\n          return _this13.props.onOperationClone();\n        },\n        style: _extends({}, styleConfig.styles.actionButtonStyle)\n      }, React.createElement('span', null, '⎘'))) : ''), Object.keys(fields).sort().map(function (fieldName) {\n        return React.createElement(FieldView, {\n          key: fieldName,\n          field: fields[fieldName],\n          selections: selections,\n          modifySelections: _this13._modifySelections,\n          schema: schema,\n          getDefaultFieldNames: getDefaultFieldNames,\n          getDefaultScalarArgValue: _this13.props.getDefaultScalarArgValue,\n          makeDefaultArg: _this13.props.makeDefaultArg,\n          onRunOperation: _this13.props.onRunOperation,\n          styleConfig: _this13.props.styleConfig,\n          onCommit: _this13.props.onCommit,\n          definition: _this13.props.definition,\n          availableFragments: _this13.props.availableFragments\n        });\n      }));\n    }\n  }]);\n\n  return RootView;\n}(React.PureComponent);\n\nfunction Attribution() {\n  return React.createElement('div', {\n    style: {\n      fontFamily: 'sans-serif',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      margin: '1em',\n      marginTop: 0,\n      flexGrow: 1,\n      justifyContent: 'flex-end'\n    }\n  }, React.createElement('div', {\n    style: {\n      borderTop: '1px solid #d6d6d6',\n      paddingTop: '1em',\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, 'GraphiQL Explorer by ', React.createElement('a', {\n    href: 'https://www.onegraph.com'\n  }, 'OneGraph')), React.createElement('div', null, 'Contribute on', ' ', React.createElement('a', {\n    href: 'https://github.com/OneGraph/graphiql-explorer'\n  }, 'GitHub')));\n}\n\nvar Explorer = function (_React$PureComponent9) {\n  _inherits(Explorer, _React$PureComponent9);\n\n  function Explorer() {\n    var _ref14;\n\n    var _temp9, _this14, _ret11;\n\n    _classCallCheck(this, Explorer);\n\n    for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    return _ret11 = (_temp9 = (_this14 = _possibleConstructorReturn(this, (_ref14 = Explorer.__proto__ || Object.getPrototypeOf(Explorer)).call.apply(_ref14, [this].concat(args))), _this14), _this14.state = {\n      newOperationType: 'query',\n      operation: null,\n      operationToScrollTo: null\n    }, _this14._resetScroll = function () {\n      var container = _this14._ref;\n\n      if (container) {\n        container.scrollLeft = 0;\n      }\n    }, _this14._onEdit = function (query) {\n      return _this14.props.onEdit(query);\n    }, _this14._setAddOperationType = function (value) {\n      _this14.setState({\n        newOperationType: value\n      });\n    }, _this14._handleRootViewMount = function (rootViewElId) {\n      if (!!_this14.state.operationToScrollTo && _this14.state.operationToScrollTo === rootViewElId) {\n        var selector = '.graphiql-explorer-root #' + rootViewElId;\n        var el = document.querySelector(selector);\n        el && el.scrollIntoView();\n      }\n    }, _temp9), _possibleConstructorReturn(_this14, _ret11);\n  }\n\n  _createClass(Explorer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._resetScroll();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this15 = this;\n\n      var _props8 = this.props,\n          schema = _props8.schema,\n          query = _props8.query,\n          makeDefaultArg = _props8.makeDefaultArg;\n\n      if (!schema) {\n        return React.createElement('div', {\n          style: {\n            fontFamily: 'sans-serif'\n          },\n          className: 'error-container'\n        }, 'No Schema Available');\n      }\n\n      var styleConfig = {\n        colors: this.props.colors || defaultColors,\n        checkboxChecked: this.props.checkboxChecked || defaultCheckboxChecked,\n        checkboxUnchecked: this.props.checkboxUnchecked || defaultCheckboxUnchecked,\n        arrowClosed: this.props.arrowClosed || defaultArrowClosed,\n        arrowOpen: this.props.arrowOpen || defaultArrowOpen,\n        styles: this.props.styles ? _extends({}, defaultStyles, this.props.styles) : defaultStyles\n      };\n      var queryType = schema.getQueryType();\n      var mutationType = schema.getMutationType();\n      var subscriptionType = schema.getSubscriptionType();\n\n      if (!queryType && !mutationType && !subscriptionType) {\n        return React.createElement('div', null, 'Missing query type');\n      }\n\n      var queryFields = queryType && queryType.getFields();\n      var mutationFields = mutationType && mutationType.getFields();\n      var subscriptionFields = subscriptionType && subscriptionType.getFields();\n      var parsedQuery = memoizeParseQuery(query);\n      var getDefaultFieldNames = this.props.getDefaultFieldNames || defaultGetDefaultFieldNames;\n      var getDefaultScalarArgValue = this.props.getDefaultScalarArgValue || defaultGetDefaultScalarArgValue;\n      var definitions = parsedQuery.definitions;\n\n      var _relevantOperations = definitions.map(function (definition) {\n        if (definition.kind === 'FragmentDefinition') {\n          return definition;\n        } else if (definition.kind === 'OperationDefinition') {\n          return definition;\n        } else {\n          return null;\n        }\n      }).filter(Boolean);\n\n      var relevantOperations = // If we don't have any relevant definitions from the parsed document,\n      // then at least show an expanded Query selection\n      _relevantOperations.length === 0 ? DEFAULT_DOCUMENT.definitions : _relevantOperations;\n\n      var renameOperation = function renameOperation(targetOperation, name) {\n        var newName = name == null || name === '' ? null : {\n          kind: 'Name',\n          value: name,\n          loc: undefined\n        };\n\n        var newOperation = _extends({}, targetOperation, {\n          name: newName\n        });\n\n        var existingDefs = parsedQuery.definitions;\n        var newDefinitions = existingDefs.map(function (existingOperation) {\n          if (targetOperation === existingOperation) {\n            return newOperation;\n          } else {\n            return existingOperation;\n          }\n        });\n        return _extends({}, parsedQuery, {\n          definitions: newDefinitions\n        });\n      };\n\n      var cloneOperation = function cloneOperation(targetOperation) {\n        var kind = void 0;\n\n        if (targetOperation.kind === 'FragmentDefinition') {\n          kind = 'fragment';\n        } else {\n          kind = targetOperation.operation;\n        }\n\n        var newOperationName = (targetOperation.name && targetOperation.name.value || '') + 'Copy';\n        var newName = {\n          kind: 'Name',\n          value: newOperationName,\n          loc: undefined\n        };\n\n        var newOperation = _extends({}, targetOperation, {\n          name: newName\n        });\n\n        var existingDefs = parsedQuery.definitions;\n        var newDefinitions = [].concat(_toConsumableArray(existingDefs), [newOperation]);\n\n        _this15.setState({\n          operationToScrollTo: kind + '-' + newOperationName\n        });\n\n        return _extends({}, parsedQuery, {\n          definitions: newDefinitions\n        });\n      };\n\n      var destroyOperation = function destroyOperation(targetOperation) {\n        var existingDefs = parsedQuery.definitions;\n        var newDefinitions = existingDefs.filter(function (existingOperation) {\n          if (targetOperation === existingOperation) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        return _extends({}, parsedQuery, {\n          definitions: newDefinitions\n        });\n      };\n\n      var addOperation = function addOperation(kind) {\n        var existingDefs = parsedQuery.definitions;\n        var viewingDefaultOperation = parsedQuery.definitions.length === 1 && parsedQuery.definitions[0] === DEFAULT_DOCUMENT.definitions[0];\n        var MySiblingDefs = viewingDefaultOperation ? [] : existingDefs.filter(function (def) {\n          if (def.kind === 'OperationDefinition') {\n            return def.operation === kind;\n          } else {\n            // Don't support adding fragments from explorer\n            return false;\n          }\n        });\n        var newOperationName = 'My' + capitalize(kind) + (MySiblingDefs.length === 0 ? '' : MySiblingDefs.length + 1); // Add this as the default field as it guarantees a valid selectionSet\n\n        var firstFieldName = '__typename # Placeholder value';\n        var selectionSet = {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: firstFieldName,\n              loc: null\n            },\n            arguments: [],\n            directives: [],\n            selectionSet: null,\n            loc: null\n          }],\n          loc: null\n        };\n        var newDefinition = {\n          kind: 'OperationDefinition',\n          operation: kind,\n          name: {\n            kind: 'Name',\n            value: newOperationName\n          },\n          variableDefinitions: [],\n          directives: [],\n          selectionSet: selectionSet,\n          loc: null\n        };\n        var newDefinitions = // If we only have our default operation in the document right now, then\n        // just replace it with our new definition\n        viewingDefaultOperation ? [newDefinition] : [].concat(_toConsumableArray(parsedQuery.definitions), [newDefinition]);\n\n        var newOperationDef = _extends({}, parsedQuery, {\n          definitions: newDefinitions\n        });\n\n        _this15.setState({\n          operationToScrollTo: kind + '-' + newOperationName\n        });\n\n        _this15.props.onEdit((0, _graphql.print)(newOperationDef));\n      };\n\n      var actionsOptions = [!!queryFields ? React.createElement('option', {\n        key: 'query',\n        className: 'toolbar-button',\n        style: styleConfig.styles.buttonStyle,\n        type: 'link',\n        value: 'query'\n      }, 'Query') : null, !!mutationFields ? React.createElement('option', {\n        key: 'mutation',\n        className: 'toolbar-button',\n        style: styleConfig.styles.buttonStyle,\n        type: 'link',\n        value: 'mutation'\n      }, 'Mutation') : null, !!subscriptionFields ? React.createElement('option', {\n        key: 'subscription',\n        className: 'toolbar-button',\n        style: styleConfig.styles.buttonStyle,\n        type: 'link',\n        value: 'subscription'\n      }, 'Subscription') : null].filter(Boolean);\n      var actionsEl = actionsOptions.length === 0 ? null : React.createElement('div', {\n        style: {\n          minHeight: '50px',\n          maxHeight: '50px',\n          overflow: 'none'\n        }\n      }, React.createElement('form', {\n        className: 'variable-editor-title graphiql-explorer-actions',\n        style: _extends({}, styleConfig.styles.explorerActionsStyle, {\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          borderTop: '1px solid rgb(214, 214, 214)'\n        }),\n        onSubmit: function onSubmit(event) {\n          return event.preventDefault();\n        }\n      }, React.createElement('span', {\n        style: {\n          display: 'inline-block',\n          flexGrow: '0',\n          textAlign: 'right'\n        }\n      }, 'Add new', ' '), React.createElement('select', {\n        onChange: function onChange(event) {\n          return _this15._setAddOperationType(event.target.value);\n        },\n        value: this.state.newOperationType,\n        style: {\n          flexGrow: '2'\n        }\n      }, actionsOptions), React.createElement('button', {\n        type: 'submit',\n        className: 'toolbar-button',\n        onClick: function onClick() {\n          return _this15.state.newOperationType ? addOperation(_this15.state.newOperationType) : null;\n        },\n        style: _extends({}, styleConfig.styles.buttonStyle, {\n          height: '22px',\n          width: '22px'\n        })\n      }, React.createElement('span', null, '+'))));\n      var availableFragments = relevantOperations.reduce(function (acc, operation) {\n        if (operation.kind === 'FragmentDefinition') {\n          var fragmentTypeName = operation.typeCondition.name.value;\n          var existingFragmentsForType = acc[fragmentTypeName] || [];\n          var newFragmentsForType = [].concat(_toConsumableArray(existingFragmentsForType), [operation]).sort(function (a, b) {\n            return a.name.value.localeCompare(b.name.value);\n          });\n          return _extends({}, acc, _defineProperty({}, fragmentTypeName, newFragmentsForType));\n        }\n\n        return acc;\n      }, {});\n      var attribution = this.props.showAttribution ? React.createElement(Attribution, null) : null;\n      return React.createElement('div', {\n        ref: function ref(_ref15) {\n          _this15._ref = _ref15;\n        },\n        style: {\n          fontSize: 12,\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n          margin: 0,\n          padding: 8,\n          fontFamily: 'Consolas, Inconsolata, \"Droid Sans Mono\", Monaco, monospace',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%'\n        },\n        className: 'graphiql-explorer-root'\n      }, React.createElement('div', {\n        style: {\n          flexGrow: '1',\n          overflow: 'scroll'\n        }\n      }, relevantOperations.map(function (operation, index) {\n        var operationName = operation && operation.name && operation.name.value;\n        var operationType = operation.kind === 'FragmentDefinition' ? 'fragment' : operation && operation.operation || 'query';\n\n        var onOperationRename = function onOperationRename(newName) {\n          var newOperationDef = renameOperation(operation, newName);\n\n          _this15.props.onEdit((0, _graphql.print)(newOperationDef));\n        };\n\n        var onOperationClone = function onOperationClone() {\n          var newOperationDef = cloneOperation(operation);\n\n          _this15.props.onEdit((0, _graphql.print)(newOperationDef));\n        };\n\n        var onOperationDestroy = function onOperationDestroy() {\n          var newOperationDef = destroyOperation(operation);\n\n          _this15.props.onEdit((0, _graphql.print)(newOperationDef));\n        };\n\n        var fragmentType = operation.kind === 'FragmentDefinition' && operation.typeCondition.kind === 'NamedType' && schema.getType(operation.typeCondition.name.value);\n        var fragmentFields = fragmentType instanceof _graphql.GraphQLObjectType ? fragmentType.getFields() : null;\n        var fields = operationType === 'query' ? queryFields : operationType === 'mutation' ? mutationFields : operationType === 'subscription' ? subscriptionFields : operation.kind === 'FragmentDefinition' ? fragmentFields : null;\n        var fragmentTypeName = operation.kind === 'FragmentDefinition' ? operation.typeCondition.name.value : null;\n\n        var onCommit = function onCommit(parsedDocument) {\n          var textualNewDocument = (0, _graphql.print)(parsedDocument);\n\n          _this15.props.onEdit(textualNewDocument);\n        };\n\n        return React.createElement(RootView, {\n          isLast: index === relevantOperations.length - 1,\n          fields: fields,\n          operationType: operationType,\n          name: operationName,\n          definition: operation,\n          onOperationRename: onOperationRename,\n          onOperationDestroy: onOperationDestroy,\n          onOperationClone: onOperationClone,\n          onTypeName: fragmentTypeName,\n          onMount: _this15._handleRootViewMount,\n          onCommit: onCommit,\n          onEdit: function onEdit(newDefinition, options) {\n            var commit = void 0;\n\n            if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.commit !== 'undefined') {\n              commit = options.commit;\n            } else {\n              commit = true;\n            }\n\n            if (!!newDefinition) {\n              var newQuery = _extends({}, parsedQuery, {\n                definitions: parsedQuery.definitions.map(function (existingDefinition) {\n                  return existingDefinition === operation ? newDefinition : existingDefinition;\n                })\n              });\n\n              if (commit) {\n                onCommit(newQuery);\n                return newQuery;\n              } else {\n                return newQuery;\n              }\n            } else {\n              return parsedQuery;\n            }\n          },\n          schema: schema,\n          getDefaultFieldNames: getDefaultFieldNames,\n          getDefaultScalarArgValue: getDefaultScalarArgValue,\n          makeDefaultArg: makeDefaultArg,\n          onRunOperation: function onRunOperation() {\n            if (!!_this15.props.onRunOperation) {\n              _this15.props.onRunOperation(operationName);\n            }\n          },\n          styleConfig: styleConfig,\n          availableFragments: availableFragments\n        });\n      }), attribution), actionsEl);\n    }\n  }]);\n\n  return Explorer;\n}(React.PureComponent);\n\nExplorer.defaultProps = {\n  getDefaultFieldNames: defaultGetDefaultFieldNames,\n  getDefaultScalarArgValue: defaultGetDefaultScalarArgValue\n};\n\nvar ErrorBoundary = function (_React$Component) {\n  _inherits(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    var _ref16;\n\n    var _temp10, _this16, _ret12;\n\n    _classCallCheck(this, ErrorBoundary);\n\n    for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    return _ret12 = (_temp10 = (_this16 = _possibleConstructorReturn(this, (_ref16 = ErrorBoundary.__proto__ || Object.getPrototypeOf(ErrorBoundary)).call.apply(_ref16, [this].concat(args))), _this16), _this16.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null\n    }, _temp10), _possibleConstructorReturn(_this16, _ret12);\n  }\n\n  _createClass(ErrorBoundary, [{\n    key: 'componentDidCatch',\n    value: function componentDidCatch(error, errorInfo) {\n      this.setState({\n        hasError: true,\n        error: error,\n        errorInfo: errorInfo\n      });\n      console.error('Error in component', error, errorInfo);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (this.state.hasError) {\n        return React.createElement('div', {\n          style: {\n            padding: 18,\n            fontFamily: 'sans-serif'\n          }\n        }, React.createElement('div', null, 'Something went wrong'), React.createElement('details', {\n          style: {\n            whiteSpace: 'pre-wrap'\n          }\n        }, this.state.error ? this.state.error.toString() : null, React.createElement('br', null), this.state.errorInfo ? this.state.errorInfo.componentStack : null));\n      }\n\n      return this.props.children;\n    }\n  }]);\n\n  return ErrorBoundary;\n}(React.Component);\n\nvar ExplorerWrapper = function (_React$PureComponent10) {\n  _inherits(ExplorerWrapper, _React$PureComponent10);\n\n  function ExplorerWrapper() {\n    _classCallCheck(this, ExplorerWrapper);\n\n    return _possibleConstructorReturn(this, (ExplorerWrapper.__proto__ || Object.getPrototypeOf(ExplorerWrapper)).apply(this, arguments));\n  }\n\n  _createClass(ExplorerWrapper, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        className: 'docExplorerWrap',\n        style: {\n          height: '100%',\n          width: this.props.width,\n          minWidth: this.props.width,\n          zIndex: 7,\n          display: this.props.explorerIsOpen ? 'flex' : 'none',\n          flexDirection: 'column',\n          overflow: 'hidden'\n        }\n      }, React.createElement('div', {\n        className: 'doc-explorer-title-bar'\n      }, React.createElement('div', {\n        className: 'doc-explorer-title'\n      }, this.props.title), React.createElement('div', {\n        className: 'doc-explorer-rhs'\n      }, React.createElement('div', {\n        className: 'docExplorerHide',\n        onClick: this.props.onToggleExplorer\n      }, \"\\u2715\"))), React.createElement('div', {\n        className: 'doc-explorer-contents',\n        style: {\n          padding: '0px',\n\n          /* Unset overflowY since docExplorerWrap sets it and it'll\n          cause two scrollbars (one for the container and one for the schema tree) */\n          overflowY: 'unset'\n        }\n      }, React.createElement(ErrorBoundary, null, React.createElement(Explorer, this.props))));\n    }\n  }]);\n\n  return ExplorerWrapper;\n}(React.PureComponent);\n\nExplorerWrapper.defaultValue = defaultValue;\nExplorerWrapper.defaultProps = {\n  width: 320,\n  title: 'Explorer'\n};\nexports.default = ExplorerWrapper;","map":null,"metadata":{},"sourceType":"script"}