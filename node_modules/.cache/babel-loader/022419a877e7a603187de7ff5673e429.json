{"ast":null,"code":"// flow\nimport GraphiQLExplorer from \"graphiql-explorer\";\nimport { isEnumType, isWrappingType } from \"graphql\";\n\nfunction unwrapOutputType(outputType) {\n  var unwrappedType = outputType;\n\n  while (isWrappingType(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType;\n  }\n\n  return unwrappedType;\n}\n\nexport function makeDefaultArg(parentField, arg) {\n  var unwrappedType = unwrapOutputType(parentField.type);\n\n  if (unwrappedType.name.startsWith(\"GitHub\") && unwrappedType.name.endsWith(\"Connection\") && (arg.name === \"first\" || arg.name === \"orderBy\")) {\n    return true;\n  }\n\n  return false;\n}\nexport function getDefaultScalarArgValue(parentField, arg, argType) {\n  var unwrappedType = unwrapOutputType(parentField.type);\n\n  switch (unwrappedType.name) {\n    case \"GitHubRepository\":\n      if (arg.name === \"name\") {\n        return {\n          kind: \"StringValue\",\n          value: \"graphql-js\"\n        };\n      } else if (arg.name === \"owner\") {\n        return {\n          kind: \"StringValue\",\n          value: \"graphql\"\n        };\n      }\n\n      break;\n\n    case \"NpmPackage\":\n      if (arg.name === \"name\") {\n        return {\n          kind: \"StringValue\",\n          value: \"graphql\"\n        };\n      }\n\n      break;\n\n    default:\n      if (isEnumType(argType) && unwrappedType.name.startsWith(\"GitHub\") && unwrappedType.name.endsWith(\"Connection\")) {\n        if (arg.name === \"direction\" && argType.getValues().map(function (x) {\n          return x.name;\n        }).includes(\"DESC\")) {\n          return {\n            kind: \"EnumValue\",\n            value: \"DESC\"\n          };\n        } else if (arg.name === \"field\" && argType.getValues().map(function (x) {\n          return x.name;\n        }).includes(\"CREATED_AT\")) {\n          return {\n            kind: \"EnumValue\",\n            value: \"CREATED_AT\"\n          };\n        }\n      }\n\n      return GraphiQLExplorer.defaultValue(argType);\n  }\n\n  return GraphiQLExplorer.defaultValue(argType);\n}","map":{"version":3,"sources":["/Users/miralem/Documents/GitHub/graphiql-explorer-example/src/CustomArgs.js"],"names":["GraphiQLExplorer","isEnumType","isWrappingType","unwrapOutputType","outputType","unwrappedType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","getValues","map","x","includes","defaultValue"],"mappings":"AAAA;AAEA,OAAOA,gBAAP,MAA6B,mBAA7B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,SAA3C;;AAYA,SAASC,gBAAT,CAA0BC,UAA1B,EAA4D;AAC1D,MAAIC,aAAa,GAAGD,UAApB;;AACA,SAAOF,cAAc,CAACG,aAAD,CAArB,EAAsC;AACpCA,IAAAA,aAAa,GAAGA,aAAa,CAACC,MAA9B;AACD;;AACD,SAAOD,aAAP;AACD;;AAED,OAAO,SAASE,cAAT,CACLC,WADK,EAELC,GAFK,EAGI;AACT,MAAMJ,aAAa,GAAGF,gBAAgB,CAACK,WAAW,CAACE,IAAb,CAAtC;;AACA,MACEL,aAAa,CAACM,IAAd,CAAmBC,UAAnB,CAA8B,QAA9B,KACAP,aAAa,CAACM,IAAd,CAAmBE,QAAnB,CAA4B,YAA5B,CADA,KAECJ,GAAG,CAACE,IAAJ,KAAa,OAAb,IAAwBF,GAAG,CAACE,IAAJ,KAAa,SAFtC,CADF,EAIE;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;AAED,OAAO,SAASG,wBAAT,CACLN,WADK,EAELC,GAFK,EAGLM,OAHK,EAIM;AACX,MAAMV,aAAa,GAAGF,gBAAgB,CAACK,WAAW,CAACE,IAAb,CAAtC;;AACA,UAAQL,aAAa,CAACM,IAAtB;AACE,SAAK,kBAAL;AACE,UAAIF,GAAG,CAACE,IAAJ,KAAa,MAAjB,EAAyB;AACvB,eAAO;AAAEK,UAAAA,IAAI,EAAE,aAAR;AAAuBC,UAAAA,KAAK,EAAE;AAA9B,SAAP;AACD,OAFD,MAEO,IAAIR,GAAG,CAACE,IAAJ,KAAa,OAAjB,EAA0B;AAC/B,eAAO;AAAEK,UAAAA,IAAI,EAAE,aAAR;AAAuBC,UAAAA,KAAK,EAAE;AAA9B,SAAP;AACD;;AACD;;AACF,SAAK,YAAL;AACE,UAAIR,GAAG,CAACE,IAAJ,KAAa,MAAjB,EAAyB;AACvB,eAAO;AAAEK,UAAAA,IAAI,EAAE,aAAR;AAAuBC,UAAAA,KAAK,EAAE;AAA9B,SAAP;AACD;;AACD;;AACF;AACE,UACEhB,UAAU,CAACc,OAAD,CAAV,IACAV,aAAa,CAACM,IAAd,CAAmBC,UAAnB,CAA8B,QAA9B,CADA,IAEAP,aAAa,CAACM,IAAd,CAAmBE,QAAnB,CAA4B,YAA5B,CAHF,EAIE;AACA,YACEJ,GAAG,CAACE,IAAJ,KAAa,WAAb,IACAI,OAAO,CACJG,SADH,GAEGC,GAFH,CAEO,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACT,IAAN;AAAA,SAFR,EAGGU,QAHH,CAGY,MAHZ,CAFF,EAME;AACA,iBAAO;AAAEL,YAAAA,IAAI,EAAE,WAAR;AAAqBC,YAAAA,KAAK,EAAE;AAA5B,WAAP;AACD,SARD,MAQO,IACLR,GAAG,CAACE,IAAJ,KAAa,OAAb,IACAI,OAAO,CACJG,SADH,GAEGC,GAFH,CAEO,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACT,IAAN;AAAA,SAFR,EAGGU,QAHH,CAGY,YAHZ,CAFK,EAML;AACA,iBAAO;AAAEL,YAAAA,IAAI,EAAE,WAAR;AAAqBC,YAAAA,KAAK,EAAE;AAA5B,WAAP;AACD;AACF;;AACD,aAAOjB,gBAAgB,CAACsB,YAAjB,CAA8BP,OAA9B,CAAP;AArCJ;;AAuCA,SAAOf,gBAAgB,CAACsB,YAAjB,CAA8BP,OAA9B,CAAP;AACD","sourcesContent":["// flow\n\nimport GraphiQLExplorer from \"graphiql-explorer\";\nimport { isEnumType, isWrappingType } from \"graphql\";\n\nimport type {\n  GraphQLField,\n  GraphQLArgument,\n  GraphQLInputField,\n  GraphQLEnumType,\n  GraphQLOutputType,\n  GraphQLScalarType,\n  ValueNode\n} from \"graphql\";\n\nfunction unwrapOutputType(outputType: GraphQLOutputType): * {\n  let unwrappedType = outputType;\n  while (isWrappingType(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType;\n  }\n  return unwrappedType;\n}\n\nexport function makeDefaultArg(\n  parentField: GraphQLField<any, any>,\n  arg: GraphQLArgument | GraphQLInputField\n): boolean {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  if (\n    unwrappedType.name.startsWith(\"GitHub\") &&\n    unwrappedType.name.endsWith(\"Connection\") &&\n    (arg.name === \"first\" || arg.name === \"orderBy\")\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function getDefaultScalarArgValue(\n  parentField: GraphQLField<any, any>,\n  arg: GraphQLArgument | GraphQLInputField,\n  argType: GraphQLEnumType | GraphQLScalarType\n): ValueNode {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  switch (unwrappedType.name) {\n    case \"GitHubRepository\":\n      if (arg.name === \"name\") {\n        return { kind: \"StringValue\", value: \"graphql-js\" };\n      } else if (arg.name === \"owner\") {\n        return { kind: \"StringValue\", value: \"graphql\" };\n      }\n      break;\n    case \"NpmPackage\":\n      if (arg.name === \"name\") {\n        return { kind: \"StringValue\", value: \"graphql\" };\n      }\n      break;\n    default:\n      if (\n        isEnumType(argType) &&\n        unwrappedType.name.startsWith(\"GitHub\") &&\n        unwrappedType.name.endsWith(\"Connection\")\n      ) {\n        if (\n          arg.name === \"direction\" &&\n          argType\n            .getValues()\n            .map(x => x.name)\n            .includes(\"DESC\")\n        ) {\n          return { kind: \"EnumValue\", value: \"DESC\" };\n        } else if (\n          arg.name === \"field\" &&\n          argType\n            .getValues()\n            .map(x => x.name)\n            .includes(\"CREATED_AT\")\n        ) {\n          return { kind: \"EnumValue\", value: \"CREATED_AT\" };\n        }\n      }\n      return GraphiQLExplorer.defaultValue(argType);\n  }\n  return GraphiQLExplorer.defaultValue(argType);\n}\n"]},"metadata":{},"sourceType":"module"}